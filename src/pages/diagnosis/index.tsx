import { Alert } from '@mantine/core'
import { useEffect, useState } from 'react'
import { useParams } from 'react-router-dom'
import { IconAlertTriangle } from '@tabler/icons-react'

import Header from '@/components/Header'
import Result from '@/classes/Result'
import ConditionCard from '@/pages/diagnosis/ConditionCard'
import fetchDiagnosis from '@/pages/diagnosis/fetchDiagnosis'

const Diagnosis: React.FC = () => {
    const [results, setResults] = useState<Result>();
    
    // grab datetime from url
    const params: any = useParams<{ datetime: string }>();
    const datetime: number = parseInt(params.datetime);
    
    const date: Date = new Date(datetime);

    // grab diagnosis from db
    useEffect(() => {
        fetchDiagnosis(datetime)
            .then((res: any) => {
                // on success
                if (res) {
                    setResults(res);
                }
            })
            .catch(() => {
                // on fail
                console.log('error');
            });
    }, []);

    // create card for each condition
    let conditions: JSX.Element[] = new Array;
    results && results.conditions.forEach((probability: number, condition: string) => {
        conditions.push(<ConditionCard probability={probability} condition={condition} />);
    });

    return (
        <>
            <div className="bg-white font-Inter">
                <Header />
                <div className="bg-blue text-white">
                    <div className="flex flex-col mx-[15rem] py-16">
                        <p className="font-bold text-2xl">
                            {date.toLocaleString('en-us', { 
                                hour: 'numeric', 
                                minute: 'numeric' })
                            + ' - ' + date.toLocaleString('en-us', { 
                                month: 'long', 
                                day: 'numeric', 
                                year: 'numeric' 
                            })}
                        </p>
                        <div className="flex gap-8">
                            <div className="flex flex-col w-3/4">
                                <p className="text-justify">
                                    Based on your provided image, the following skin conditions were detected using our model.
                                </p>
                                <Alert
                                    className="font-Inter text-white my-4"
                                    variant="filled"
                                    color="#DB5461"
                                    title="Warning"
                                    icon={ <IconAlertTriangle className="text-white" />}
                                >
                                    <p className="font-Inter text-white text-justify">
                                        The results generated by Skintector is for educational purposes only. It is not a substitute for professional medical advice. Always seek the advice of your physician or other qualified healthcare professionals for any questions you may have regarding a medical condition.
                                    </p>
                                </Alert>
                            </div>
                            <img className="w-[320px] h-[240px]" src={results && results.image} />
                        </div>
                    </div>
                </div>
                <div className="flex flex-col mx-[15rem]">
                    {conditions}
                </div>
            </div>
        </>
    );
}

export default Diagnosis;